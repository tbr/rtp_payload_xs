---
title: RTP Payload Format for ISO/IEC 21122 (JPEG XS)
date: 2025-06-02
docname: draft-bruylants-avtcore-rtp-jpegxs-3ed-01
abbrev: RTP Payload Format for JPEG XS

stand_alone: yes

# Import configuration, authors, references, etc.
{::include ./draft-bruylants-avtcore-rtp-jpegxs-3ed_preamble.inc}

--- fluff

Written in kramdown-rfc, sources available at: https://github.com/tbr/rtp_payload_xs .

--- abstract

This document specifies a Real-Time Transport Protocol (RTP) payload format for transport of a video signal encoded with JPEG XS (ISO/IEC 21122). JPEG XS is a low-latency and low-complexity video coding system. Employing this format allows achieving encoding-decoding latencies confined to a fraction of a video frame.

This document is a necessary revision of RFC 9134 to incorporate support for new features introduced in the third edition of JPEG XS. Most notably, it contains the necessary provisions to support the TDC coding mode. This document obsoletes RFC 9134; however, the revised payload format is designed to ensure that existing compliant implementations of RFC 9134 remain valid under the updated specification. Additionally, this document consolidates the errata of RFC 9134 and includes improvements and clarifications to its implementers and users.

--- middle

# Introduction

This document specifies a payload format for packetization of video signals encoded with JPEG XS {{ISO21122-1}} into the Real-time Transport Protocol (RTP) {{RFC3550}}.

The JPEG XS coding system offers compression and recompression of video signals with very moderate computational resources while remaining robust under multiple compression and decompression cycles as well as mixing of content sources, e.g., embedding of subtitles, overlays, or logos. Typical target compression ratios ensuring visually lossless quality are in the range of 2:1 to 18:1 depending on the nature of the source material. The latency that is introduced by the encoding-decoding process can be confined to a fraction of a video frame, typically expressed in a number of lines.

Initially, the first and second editions of JPEG XS only supported intra coding for video content. However, the third edition of the standard introduced the so-called Temporal Differential Coding (TDC) mode that provides a temporal decorrelation step in the wavelet-domain. For progressive video content, a single frame buffer is used for the decorrelation of successive video frames. For interlaced content, two separate frame buffers are used, one for per video field.

This document is a necessary revision of [RFC9134] to incorporate support for new features introduced in the third edition of JPEG XS. Most notably, it contains the necessary provisions to support the TDC coding mode. This document obsoletes [RFC9134]; however, the revised payload format is designed to ensure that existing compliant implementations of [RFC9134] remain valid under the updated specification. Additionally, this document consolidates the errata of [RFC9134] and includes improvements and clarifications to its implementers and users. {{annex-a}} provides more details on the changes between [RFC9134] and this revision.

# Conventions, Definitions, and Abbreviations

{::boilerplate bcp14-tagged}

{: vspace="0"}
Application Data Unit (ADU):
: The unit of source data provided as payload to the transport layer. In this RTP payload definition, it corresponds to a single JPEG XS video frame.

Color Specification (CS) box:
: An ISO Color Specification box defined in [ISO21122-3] that includes color-related metadata required to correctly display JPEG XS video frames, such as color primaries, transfer characteristics, and matrix coefficients.

End of Codestream (EOC) marker:
: A marker that consists of the two bytes `0xff11` indicating the end of a JPEG XS codestream, as defined in [ISO21122-1].

Frame Buffer Bandwidth (FBB):
: The bandwidth defined in [ISO21122-2] needed to read from and write to the internal frame buffer when employing the TDC coding mode. This bandwidth is modeled and capped based on an FBB level parameter.

JPEG XS codestream:
: A sequence of bytes representing a compressed video frame (progressive) or field (interlaced), formatted according to [ISO21122-1].

JPEG XS codestream header:
: A sequence of bytes, starting with an SOC marker, at the beginning of each JPEG XS codestream encoded in multiple markers and marker segments, that does not carry entropy coded data, but metadata such as the video frame dimension and component precision.

JPEG XS frame:
: In the case of progressive video, a single JPEG XS picture segment. In the case of interlaced video, the concatenation of two JPEG XS picture segments.

JPEG XS header segment:
: The concatenation of a Video Support box [ISO21122-3], a Color Specification box [ISO21122-3], and a JPEG XS codestream header.

JPEG XS picture segment:
: The concatenation of a Video Support box [ISO21122-3], a Color Specification box [ISO21122-3], and a JPEG XS codestream.

JPEG XS stream:
: A sequence of JPEG XS frames.

Marker:
: A two-byte functional sequence that is part of a JPEG XS codestream starting with a `0xff` byte and a subsequent byte defining its function.

Marker segment:
: A marker along with a 16-bit marker size and payload data following the size.

Packetization unit:
: A portion of an ADU whose boundaries coincide with boundaries of RTP packet payloads (excluding payload header), i.e., the first (or respectively, last) byte of a packetization unit is the first (or respectively, last) byte of an RTP packet payload (excluding its payload header).

SLH (Slice header) marker:
: A marker that represents a slice header, as defined in [ISO21122-1].

SLI (TDC enabling slice header) marker:
: A marker that represents a TDC enabling slice header, as defined in [ISO21122-1].

Slice:
: The smallest independently decodable unit of a JPEG XS codestream, bearing in mind that it decodes to wavelet coefficients, which still require inverse wavelet filtering before visualization.

Start of a Codestream (SOC) marker:
: A marker that consists of the two bytes `0xff10` indicating the start of a JPEG XS codestream, as defined in [ISO21122-1]. The SOC marker is considered an integral part of the JPEG XS codestream header.

Temporal Differential Coding (TDC):
: An inter-frame coding mode used by certain JPEG XS profiles, as defined in [ISO21122-2].

Video Support (VS) box:
: An ISO Video Support box, as defined in [ISO21122-3], that includes metadata required to play back a JPEG XS stream; such metadata could include its maximum bit rate, its subsampling structure, its buffer model, and its frame rate.

# Media Format Description

This section explains the terminology and concepts used in this memo specific to JPEG XS as specified in [ISO21122-1], [ISO21122-2], and [ISO21122-3].

## Data Structures

JPEG XS is a low-latency and lightweight coding system for compression of digital continuous-tone grayscale and color signals, like images and videos.

This coding system provides an efficient representation of visual content through the mathematical tool of wavelet analysis. The wavelet filter process separates each component into multiple bands, where each band consists of multiple coefficients describing the visual signal of a given component within a frequency domain specific to the wavelet filter type, i.e., the particular filter corresponding to the band.

Wavelet coefficients are grouped into precincts, where each precinct includes all coefficients over all bands that contribute to a spatial region of the picture.

One or multiple precincts are furthermore combined into slices consisting of an integer number of precincts. Precincts do not cross slice boundaries, and wavelet coefficients in precincts that are part of different slices can be decoded independently of each other. However, note that the wavelet transformation runs across slice boundaries. A slice always extends over the full width of the picture segment but may only cover parts of its height.

{: #sec-codestream}
## Codestream

A JPEG XS codestream is formed by (in the given order):

* a JPEG XS codestream header, which starts with a Start of Codestream (SOC) marker,
* one or more slices, each starting with either an SLH or SLI marker,
* an EOC marker to signal the end of the codestream.

The JPEG XS codestream format, including the definition of all markers, is further provided in [ISO21122-1]. It represents sample values of a single picture, without any interpretation relative to a color space.

As defined in [ISO21122-1], slices are represented in the codestream as contiguous sequences of bytes, always beginning with a slice header followed by one or more precincts, and optionally including slice-based extension markers. The slice header SHALL be either an SLH or an SLI marker. The last byte of a slice in the codestream SHALL immediately precede either an SLH or SLI marker (indicating the start of the next slice) or an EOC marker (in the case of the final slice).

A JPEG XS codestream not using the TDC coding mode can be decoded independently as a stand-alone picture (a video frame or field). However, a codestream that employs the TDC coding mode has a potential dependency on the contents stored in a frame buffer as described in [ISO21122-1]. This frame buffer holds a quantized version of all wavelet coefficients that were reconstructed from decoding the previous codestream. For progressive video streams, a single frame buffer is maintained. For interlaced video streams, two separate frame buffers are maintained, one for each video field (i.e. video fields are independent of each other).

## Video Support box and Color Specification box

While the information defined in the codestream is sufficient to reconstruct the sample values of one picture, the interpretation of the samples remains undefined by the codestream itself. This interpretation is given by the Video Support box and the Color Specification box, which contain significant information to correctly play back the JPEG XS stream. The layout and syntax of these boxes, together with their content, are defined in [ISO21122-3].

The Video Support box provides information on the maximum bit rate, the frame rate, the interlaced mode (progressive or interlaced), the colour subsampling format, the informative timecode of the current JPEG XS frame or field, the profile, the level/sublevel used, and optionally the buffer model and the mastering display metadata.

Note that the profile and level/sublevel/fbblevel, specified respectively by the `Ppih` and `Plev` fields [ISO21122-2], specify limits on the capabilities needed to decode the codestream and handle the output. Profiles represent a limit on the required algorithmic features and parameter ranges used in the codestream. The combination of level and sublevel defines a lower bound on the required throughput for a decoder in the visual (or decoded) domain and the codestream (or coded) domain, respectively. The frame buffer bandwidth (FBB) level defines a lower bound on the required bandwidth to read from and write to the frame buffer(s) when using the TDC coding mode. The actual defined profiles and levels/sublevels/fbblevel, along with the associated values for the `Ppih` and `Plev` fields, are defined in [ISO21122-2].

The Color Specification box indicates the color primaries, transfer characteristics, matrix coefficients, and video full range flag needed to specify the color space of the video stream.

## JPEG XS frame and picture segment

The concatenation of a Video Support box, a Color Specification box, and a JPEG XS codestream forms a JPEG XS picture segment.

In the case of a progressive video stream, each JPEG XS frame consists of one single JPEG XS picture segment.

In the case of an interlaced video stream, each JPEG XS frame consists of two concatenated JPEG XS picture segments. Each JPEG XS picture segment corresponds exclusively to one of the two fields of the interlaced frame.

Note that {{sec_payload_data}} further mandates that the boxes in both picture segments, and their respective layouts, SHALL be identical with the exception of the value of the Tcod field in the Video Information box [ISO21122-3].

Note that the interlaced mode, as signaled by the `frat` field [ISO21122-3] in the Video Support box, indicates either progressive, interlaced top-field-first, or interlaced bottom-field-first mode. Thus, in the case of interlaced video, its value SHALL also be identical in both picture segments.

Note that the `frat` field [ISO21122-3] in the Video Support box always signals the frame rate, even in the case of interlaced video. This should not be confused with the field rate.

# RTP Payload Format

This section specifies the payload format for JPEG XS streams over the Real-time Transport Protocol (RTP) [RFC3550].

In order to be transported over RTP, each JPEG XS stream is transported in a distinct RTP stream, identified by a distinct synchronization source (SSRC) [RFC3550].

A JPEG XS stream is divided into Application Data Units (ADUs), each ADU corresponding to a single JPEG XS frame.

{: #sec_rtp_packetization}
## RTP Packetization

An ADU is made of several packetization units. If a packetization unit is bigger than the maximum size of an RTP packet payload, the unit is split into multiple RTP packet payloads, as illustrated in {{fig_adu_packetization}}. As seen there, each packet SHALL contain (part of) one, and only one, packetization unit. A packetization unit may extend over multiple packets. The payload of every packet SHALL have the same size (based, e.g., on the Maximum Transfer Unit of the network) with the possible exception of the last packet of a packetization unit. The boundaries of a packetization unit SHALL coincide with the boundaries of the payload of a packet (excluding the payload header), i.e., the first (or, respectively, last) byte of the packetization unit SHALL be the first (or, respectively, last) byte of the payload (excluding its header).

~~~~~~~~~~
RTP        +-----+------------------------+
Packet #1  | Hdr | Packetization unit #1  |
           +-----+------------------------+
RTP        +-----+--------------------------------------+
Packet #2  | Hdr | Packetization unit #2                |
           +-----+--------------------------------------+
RTP        +-----+--------------------------------------------------+
Packet #3  | Hdr | Packetization unit #3  (part 1/3)                |
           +-----+--------------------------------------------------+
RTP        +-----+--------------------------------------------------+
Packet #4  | Hdr | Packetization unit #3  (part 2/3)                |
           +-----+--------------------------------------------------+
RTP        +-----+----------------------------------------------+
Packet #5  | Hdr | Packetization unit #3  (part 3/3)            |
           +-----+----------------------------------------------+
             ...
RTP        +-----+-----------------------------------------+
Packet #P  | Hdr | Packetization unit #N  (part q/q)       |
           +-----+-----------------------------------------+
~~~~~~~~~~
{: #fig_adu_packetization title="Example of ADU Packetization"}

There are two different packetization modes defined for this RTP payload format.

{: vspace="0"}
Codestream packetization mode:
: In this mode, the packetization unit SHALL be the entire JPEG XS picture segment (i.e., codestream preceded by boxes).  This means that a progressive frame will have a single packetization unit, while an interlaced frame will have two. The progressive case is illustrated in {{fig_ex_cs_packetization}}.

Slice packetization mode:
: In this mode, the packetization unit SHALL be the slice, i.e., there SHALL be data from no more than one slice per RTP packet. The first packetization unit of each JPEG XS picture segment SHALL contain the JPEG XS header segment (i.e., the concatenation of the VS box, the CS box, and the JPEG XS codestream header). This first unit is then followed by successive units, each containing one and only one slice. The packetization unit containing the last slice of a JPEG XS picture segment SHALL also contain the EOC marker immediately following this last slice. This is illustrated in {{fig_ex_sl_packetization}}. In the case of an interlaced frame, the JPEG XS header segment of the second field SHALL be in its own packetization unit.

~~~~~~~~~~
RTP        +-----+--------------------------------------------------+
Packet #1  | Hdr | VS box + CS box + JPEG XS codestream (part 1/q)  |
           +-----+--------------------------------------------------+
RTP        +-----+--------------------------------------------------+
Packet #2  | Hdr | JPEG XS codestream (part 2/q)                    |
           +-----+--------------------------------------------------+
             ...
RTP        +-----+--------------------------------------+
Packet #P  | Hdr | JPEG XS codestream (part q/q)        |
           +-----+--------------------------------------+
~~~~~~~~~~
{: #fig_ex_cs_packetization title="Example of Codestream Packetization Mode"}

~~~~~~~~~~
RTP        +-----+----------------------------+
Packet #1  | Hdr | JPEG XS header segment     |
           +-----+----------------------------+
RTP        +-----+--------------------------------------------------+
Packet #2  | Hdr | Slice #1  (part 1/2)                             |
           +-----+--------------------------------------------------+
RTP        +-----+-------------------------------------------+
Packet #3  | Hdr | Slice #1  (part 2/2)                      |
           +-----+-------------------------------------------+
RTP        +-----+--------------------------------------------------+
Packet #4  | Hdr | Slice #2  (part 1/3)                             |
           +-----+--------------------------------------------------+
             ...
RTP        +-----+---------------------------------------+
Packet #P  | Hdr | Slice #N  (part q/q) + EOC marker     |
           +-----+---------------------------------------+
~~~~~~~~~~
{: #fig_ex_sl_packetization title="Example of Slice Packetization Mode"}

In a constant bitrate (CBR) scenario of JPEG XS, the codestream packetization mode guarantees that a JPEG XS RTP stream will produce both a constant number of bytes per video frame and a constant number of RTP packets per video frame.  However, to provide similar guarantees with JPEG XS in a variable bitrate (VBR) mode or when using the slice packetization mode (for either CBR or VBR), additional mechanisms are needed. This can involve a constraint at the rate allocation stage in the JPEG XS encoder to impose a CBR at the slice level, the usage of padding data, or the insertion of empty RTP packets (i.e., an RTP packet whose payload data is empty). But, management of the amount of produced packets per video frame is application dependent and not a strict requirement of this RTP payload specification.

## RTP Header Usage

The format of the RTP header is specified in [RFC3550] and reprinted in {{fig_rtp_header}} for convenience. This RTP payload format uses the fields of the header in a manner consistent with that specification.

The RTP payload (and the settings for some RTP header bits) for packetization units are specified in {{sec_payload_header_usage}}.

~~~~~~~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|V=2|P|X|  CC   |M|     PT      |       sequence number         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                           timestamp                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           synchronization source (SSRC) identifier            |
+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
|            contributing source (CSRC) identifiers             |
|                             ....                              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
~~~~~~~~~~
{: #fig_rtp_header title="RTP Header According to RFC 3550"}

The version (`V`), padding (`P`), extension (`X`), CSRC count (`CC`), sequence number, synchronization source (SSRC), and contributing source (CSRC) fields follow their respective definitions in [RFC3550].

The remaining RTP header information to be set according to this RTP payload format is set as follows:

{: vspace="0"}
Marker (`M`) \[1 bit\]:
: If progressive video is being transmitted, the marker bit denotes the end of a video frame. If interlaced video is being transmitted, it denotes the end of a field. The marker bit SHALL be set to 1 for the last packet of a JPEG XS picture segment. It SHALL be set to 0 for all other packets.

Payload Type (`PT`) \[7 bits\]:
: The payload type is a dynamically allocated payload type field that designates the payload as JPEG XS video.

Timestamp \[32 bits\]:
: The RTP timestamp is set to the sampling timestamp of the content (see also [RFC3550] and [RFC4175]). A 90 kHz clock rate SHALL be used. If the sampling instant does not correspond to an integer value of the clock, the value SHALL be rounded up to the next lowest integer, with no ambiguity.

  For progressive video, the timestamp denotes the sampling instant of the frame to which the RTP packet belongs. Packets SHALL NOT include data from multiple frames, and all packets belonging to the same frame SHALL have the same timestamp.

  For interlaced video, the timestamp denotes the sampling instant of the field to which the RTP packet belongs.  Packets SHALL NOT include data from multiple fields, and all packets belonging to the same field SHALL have the same timestamp. Use of field timestamps, rather than a frame timestamp and field indicator bit, is needed to support reverse 3-2 pulldown.

  Several successive RTP packets will consequently have equal timestamps if they belong to the same video frame for progressive content, or the same video field for interlaced content. That is, the time stamp does not change until after the marker bit (`M`) is set to 1, marking the last packet of the video frame or field.  The timestamp is only increased when a new video frame or field begins.

{: #sec_payload_header_usage}
## Payload Header Usage

The first four bytes of the payload of an RTP packet in this RTP payload format are referred to as the "payload header".  {{fig_payload_header}} illustrates the structure of this payload header.

~~~~~~~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|T|K|L| I |F counter|     SEP counter     |     P counter       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
~~~~~~~~~~
{: #fig_payload_header title="Payload Header"}

The payload header consists of the following fields:

{: vspace="0"}
Transmission mode (`T`) \[1 bit\]:
: The `T` bit is set to indicate that packets are sent sequentially by the transmitter. This information allows a receiver to dimension its input buffer(s) accordingly. If `T=0`, nothing can be assumed about the transmission order and the transmitter may send out its packets in any order. If `T=1`, the transmitter SHALL send out the packets as a monotonically increasing sequence according to the F, SEP, and P fields. The `T` bit value SHALL be identical for all packets of the RTP stream. Note that even with `T=1`, packets may still arrive out of order relative to the sequence in which they were sent.

pacKetization mode (`K`) \[1 bit\]:
: The `K` bit is set to indicate which packetization mode is used. `K=0` indicates codestream packetization mode, while `K=1` indicates slice packetization mode. In the case that the Transmission mode (`T`) is set to 0 (arbitrary sending order), then `K` SHALL be set to 1 (slice packetization mode). The `K` bit value SHALL be identical for all packets of the RTP stream.

Last (`L`) \[1 bit\]:
: The `L` bit is set to indicate the last packet of a packetization unit. As the end of the video frame also ends the packet containing the last unit of the video frame, the `L` bit is set whenever the `M` bit is set. In the codestream packetization mode, the `L` bit and `M` bit get an equivalent meaning, so they SHALL have identical values in each packet.

Interlaced information (`I`) \[2 bits\]:
: These two `I` bits are used to indicate how the JPEG XS frame is scanned (progressive or interlaced). In case of an interlaced frame, they also indicate which JPEG XS picture segment the payload is part of (first or second).

  00:   The payload is progressively scanned.

  01:   This value is reserved for future use.

  10:   The payload is part of the first JPEG XS picture segment of an interlaced video frame. The height specified in the included JPEG XS codestream header is half of the height of the entire displayed video frame.

  11:   The payload is part of the second JPEG XS picture segment of an interlaced video frame. The height specified in the included JPEG XS codestream header is half of the height of the entire displayed video frame.

`F` counter \[5 bits\]:
: The Frame (`F`) counter identifies the video frame number modulo 32 to which a packet belongs. Frame numbers SHALL increment by 1 for each video frame transmitted. The frame number, in addition to the timestamp, may help the decoder manage its input buffer and bring packets back into their natural order. For interlaced frames, both fields SHALL have the same `F` counter value.

Slice and Extended Packet (`SEP`) counter \[11 bits\]:
: The `SEP` counter is used differently depending on the packetization mode.

  *  In the case of codestream packetization mode (`K=0`), this counter resets whenever the Packet counter resets (see {{sec_payload_data}}) and increments by 1 whenever the Packet counter overruns.

  *  In the case of slice packetization mode (`K=1`), this counter identifies the slice modulo 2047 to which the packet contributes. If the data belongs to the JPEG XS header segment, this field SHALL have its maximal value, namely `2047=0x07ff`. Otherwise, it is the slice index modulo 2047. Slice indices are counted from 0 (corresponding to the top of the video frame).

`P` counter \[11 bits\]:
: The Packet (`P`) counter identifies the packet number modulo 2048 within the current packetization unit. It is set to 0 at the start of the packetization unit and incremented by 1 for every subsequent packet (if any) belonging to the same unit. Practically, if codestream packetization mode is enabled, this field counts the packets within a JPEG XS picture segment and is extended by the `SEP` counter when it overruns. If slice packetization mode is enabled, this field counts the packets within a slice or within the JPEG XS header segment.

{: #sec_payload_data}
## Payload Data

The payload data of a JPEG XS RTP stream consists of a concatenation of multiple JPEG XS frames, each consisting of one (for progressive video) or two (for interlaced video) JPEG XS picture segments. Within the RTP stream, all of the Video Support boxes and all of the Color Specification boxes SHALL retain their respective layouts for each JPEG XS picture segment across all JPEG XS frames, for the entirety of the JPEG XS RTP stream. Thus, each Video Support box in the RTP stream SHALL define the same sub boxes, in the same order. With the exception of the value of the `Tcod` field in the Video Information box [ISO21122-3], the effective values in the boxes SHALL be identical across all JPEG XS picture segments of the RTP stream.

Each JPEG XS frame is represented by one or more packetization unit(s), as explained in {{sec_rtp_packetization}}. {{fig_cs_pack_mode_prog}} depicts this layout for a progressive video frame in the codestream packetization mode, {{fig_cs_pack_mode_int}} depicts this layout for an interlaced video frame in the codestream packetization mode, {{fig_sl_pack_mode_prog}} depicts this layout for a progressive video frame in the slice packetization mode, and {{fig_sl_pack_mode_int}} depicts this layout for an interlaced video frame in the slice packetization mode. The Frame (`F`) counter value is not indicated because the value is constant for all packetization units of a given video frame.

~~~~~~~~~~
+=====[ Packetization unit (PU) #1 ]====+
|           Video Support box           |  SEP counter=0
|  +---------------------------------+  |  P counter=0
|  :      Sub boxes of the VS box    :  |
|  +---------------------------------+  |
+- - - - - - - - - - - - - - - - - - - -+
|        Color Specification box        |
|  +---------------------------------+  |
|  :      Fields of the CS box       :  |
|  +---------------------------------+  |
+- - - - - - - - - - - - - - - - - - - -+
|          JPEG XS codestream           |
:             (part 1/q)                :  M=0, K=0, L=0, I=00
+---------------------------------------+
|          JPEG XS codestream           |  SEP counter=0
|             (part 2/q)                |  P counter=1
:                                       :  M=0, K=0, L=0, I=00
+---------------------------------------+
|          JPEG XS codestream           |  SEP counter=0
|             (part 3/q)                |  P counter=2
:                                       :  M=0, K=0, L=0, I=00
+---------------------------------------+
:                 ...                   :
+---------------------------------------+
|          JPEG XS codestream           |  SEP counter=1
|            (part 2049/q)              |  P counter=0
:                                       :  M=0, K=0, L=0, I=00
+---------------------------------------+
:                 ...                   :
+---------------------------------------+
|          JPEG XS codestream           |  SEP counter=(q-1) div 2048
|             (part q/q)                |  P counter=(q-1) mod 2048
:                                       :  M=1, K=0, L=1, I=00
+=======================================+
~~~~~~~~~~
{: #fig_cs_pack_mode_prog title="Example of JPEG XS Payload Data using Codestream Packetization Mode with Progressive Video Frames"}

~~~~~~~~~~
+=====[ Packetization unit (PU) #1 ]====+
|           Video Support box           |  SEP counter=0
+- - - - - - - - - - - - - - - - - - - -+  P counter=0
|        Color Specification box        |
+- - - - - - - - - - - - - - - - - - - -+
|     JPEG XS codestream (1st field)    |
:             (part 1/q)                :  M=0, K=0, L=0, I=10
+---------------------------------------+
|     JPEG XS codestream (1st field)    |  SEP counter=0
|             (part 2/q)                |  P counter=1
:                                       :  M=0, K=0, L=0, I=10
+---------------------------------------+
:                 ...                   :
+---------------------------------------+
|     JPEG XS codestream (1st field)    |  SEP counter=1
|            (part 2049/q)              |  P counter=0
:                                       :  M=0, K=0, L=0, I=10
+---------------------------------------+
:                 ...                   :
+---------------------------------------+
|     JPEG XS codestream (1st field)    |  SEP counter=(q-1) div 2048
|             (part q/q)                |  P counter=(q-1) mod 2048
:                                       :  M=1, K=0, L=1, I=10
+=====[ Packetization unit (PU) #2 ]====+
|           Video Support box           |  SEP counter=0
+- - - - - - - - - - - - - - - - - - - -+  P counter=0
|        Color Specification box        |
+- - - - - - - - - - - - - - - - - - - -+
|     JPEG XS codestream (2nd field)    |
|             (part 1/q)                |
:                                       :  M=0, K=0, L=0, I=11
+---------------------------------------+
|     JPEG XS codestream (2nd field)    |  SEP counter=0
|             (part 2/q)                |  P counter=1
:                                       :  M=0, K=0, L=0, I=11
+---------------------------------------+
:                 ...                   :
+---------------------------------------+
|     JPEG XS codestream (2nd field)    |  SEP counter=(q-1) div 2048
|             (part q/q)                |  P counter=(q-1) mod 2048
:                                       :  M=1, K=0, L=1, I=11
+=======================================+
~~~~~~~~~~
{: #fig_cs_pack_mode_int title="Example of JPEG XS Payload Data using Codestream Packetization Mode with Interlaced Video Frames"}

~~~~~~~~~~
+===[ PU #1: JPEG XS Header segment ]===+
|           Video Support box           |  SEP counter=0x07FF
+- - - - - - - - - - - - - - - - - - - -+  P counter=0
|        Color Specification box        |
+- - - - - - - - - - - - - - - - - - - -+
|      JPEG XS codestream header        |
|  +---------------------------------+  |
|  :  Markers and marker segments    :  |
|  +---------------------------------+  |  M=0, T=0, K=1, L=1, I=00
+==========[ PU #2: Slice #1 ]==========+
|  +---------------------------------+  |  SEP counter=0
|  |        SLH or SLI Marker        |  |  P counter=0
|  +---------------------------------+  |
|  :       Entropy Coded Data        :  |
|  +---------------------------------+  |  M=0, T=0, K=1, L=1, I=00
+==========[ PU #3: Slice #2 ]==========+
|               Slice #2                |  SEP counter=1
|              (part 1/q)               |  P counter=0
:                                       :  M=0, T=0, K=1, L=0, I=00
+---------------------------------------+
|               Slice #2                |  SEP counter=1
|              (part 2/q)               |  P counter=1
:                                       :  M=0, T=0, K=1, L=0, I=00
+---------------------------------------+
:                 ...                   :
+---------------------------------------+
|               Slice #2                |  SEP counter=1
|              (part q/q)               |  P counter=q-1
:                                       :  M=0, T=0, K=1, L=1, I=00
+=======================================+
:                 ...                   :
+========[ PU #N: Slice #(N-1) ]========+
|             Slice #(N-1)              |  SEP counter=N-2
|              (part 1/r)               |  P counter=0
:                                       :  M=0, T=0, K=1, L=0, I=00
+---------------------------------------+
:                 ...                   :
+---------------------------------------+
|             Slice #(N-1)              |  SEP counter=N-2
|              (part r/r)               |  P counter=r-1
:             + EOC marker              :  M=1, T=0, K=1, L=1, I=00
+=======================================+
~~~~~~~~~~
{: #fig_sl_pack_mode_prog title="Example of JPEG XS Payload Data using Slice Packetization Mode with Progressive Video Frames"}

~~~~~~~~~~
+==[ PU #1: JPEG XS Header segment 1 ]==+
|           Video Support box           |  SEP counter=0x07FF
+- - - - - - - - - - - - - - - - - - - -+  P counter=0
|        Color Specification box        |
+- - - - - - - - - - - - - - - - - - - -+
|      JPEG XS codestream header 1      |
|  +---------------------------------+  |
|  :   Markers and marker segments   :  |
|  +---------------------------------+  |  M=0, T=0, K=1, L=1, I=10
+====[ PU #2: Slice #1 (1st field) ]====+
|  +---------------------------------+  |  SEP counter=0
|  |        SLH or SLI Marker        |  |  P counter=0
|  +---------------------------------+  |
|  :       Entropy Coded Data        :  |
|  +---------------------------------+  |  M=0, T=0, K=1, L=1, I=10
+====[ PU #3: Slice #2 (1st field) ]====+
|              Slice #2                 |  SEP counter=1
|             (part 1/q)                |  P counter=0
:                                       :  M=0, T=0, K=1, L=0, I=10
+---------------------------------------+
|              Slice #2                 |  SEP counter=1
|             (part 2/q)                |  P counter=1
:                                       :  M=0, T=0, K=1, L=0, I=10
+---------------------------------------+
:                 ...                   :
+---------------------------------------+
|              Slice #2                 |  SEP counter=1
|             (part q/q)                |  P counter=q-1
:                                       :  M=0, T=0, K=1, L=1, I=10
+=======================================+
:                 ...                   :
+==[ PU #N: Slice #(N-1) (1st field) ]==+
|            Slice #(N-1)               |  SEP counter=N-2
|             (part 1/r)                |  P counter=0
:                                       :  M=0, T=0, K=1, L=0, I=10
+---------------------------------------+
:                 ...                   :
+---------------------------------------+
|            Slice #(N-1)               |  SEP counter=N-2
|             (part r/r)                |  P counter=r-1
:            + EOC marker               :  M=1, T=0, K=1, L=1, I=10
+=======================================+
+=[ PU #N+1: JPEG XS Header segment 2 ]=+
|           Video Support box           |  SEP counter=0x07FF
+- - - - - - - - - - - - - - - - - - - -+  P counter=0
|        Color Specification box        |
+- - - - - - - - - - - - - - - - - - - -+
|       JPEG XS codestream header 2     |
|  +---------------------------------+  |
|  :  Markers and marker segments    :  |
|  +---------------------------------+  |  M=0, T=0, K=1, L=1, I=11
+===[ PU #N+2: Slice #1 (2nd field) ]===+
|  +---------------------------------+  |  SEP counter=0
|  |        SLH or SLI Marker        |  |  P counter=0
|  +---------------------------------+  |
|  :      Entropy Coded Data         :  |
|  +---------------------------------+  |  M=0, T=0, K=1, L=1, I=11
+===[ PU #N+3: Slice #2 (2nd field) ]===+
|               Slice #2                |  SEP counter=1
|              (part 1/s)               |  P counter=0
:                                       :  M=0, T=0, K=1, L=0, I=11
+---------------------------------------+
|               Slice #2                |  SEP counter=1
|              (part 2/s)               |  P counter=1
:                                       :  M=0, T=0, K=1, L=0, I=11
+---------------------------------------+
:                 ...                   :
+---------------------------------------+
|               Slice #2                |  SEP counter=1
|              (part s/s)               |  P counter=s-1
:                                       :  M=0, T=0, K=1, L=1, I=11
+=======================================+
:                 ...                   :
+==[ PU #2N: Slice #(N-1) (2nd field) ]=+
|             Slice #(N-1)              |  SEP counter=N-2
|              (part 1/t)               |  P counter=0
:                                       :  M=0, T=0, K=1, L=0, I=11
+---------------------------------------+
:                 ...                   :
+---------------------------------------+
|             Slice #(N-1)              |  SEP counter=N-2
|              (part t/t)               |  P counter=t-1
:             + EOC marker              :  M=1, T=0, K=1, L=1, I=11
+=======================================+
~~~~~~~~~~
{: #fig_sl_pack_mode_int title="Example of JPEG XS Payload Data using Slice Packetization Mode with Interlaced Video Frames"}

{: #sec-traffic-shaping}
# Traffic Shaping and Delivery Timing

In order to facilitate proper synchronization between senders and receivers, it is RECOMMENDED to implement traffic shaping and delivery timing in accordance with the Network Compatibility Model compliance definitions specified in [SMPTE2110-21]. In such a case, the session description SHALL signal the compliance with the media type parameter TP.  The actual applied traffic shaping and timing delivery mechanism is outside the scope of this memo and does not influence the payload packetization.

# Congestion Control Considerations

Congestion control for RTP SHALL be used in accordance with [RFC3550] and with any applicable RTP profile, e.g., RTP/AVP [RFC3551] or RTP/AVPF [RFC4585].

While JPEG XS is mainly designed to be used in controlled network environments, it can also be employed in best-effort network environments, like the Internet. However, in this case, the users of this payload format SHALL monitor packet loss to ensure that the packet loss rate is within acceptable parameters. This can be achieved, for example, by means of RTP Control Protocol (RTCP) Feedback for Congestion Control [RFC8888].

In addition, [RFC8083] is an update to [RFC3550] that defines criteria for when one is required to stop sending RTP Packet Streams and for when applications implementing this standard SHALL comply with it.

[RFC8085] provides additional information on the best practices for applying congestion control to UDP streams.

{: #sec-payload-params}
# Payload Format Parameters

This section specifies the required and optional parameters of the payload format and/or the RTP stream. All parameters are declarative, meaning that the information signaled by the parameters is also present in the payload data, namely in the payload header (see {{sec_payload_header_usage}}) or in the JPEG XS header segment [ISO21122-1] [ISO21122-3]. When provided, their respective values SHALL be consistent with the payload.

{: #sec-media-type-reg}
## Media Type Registration

This registration is done using the template defined in [RFC6838] and following [RFC4855].

The receiver SHALL ignore any unrecognized parameter.

{: vspace="0"}
Type name:
: video

Subtype name:
: jxsv

Required parameters:
: rate:
  : The RTP timestamp clock rate. Applications using this payload format SHALL use a value of 90000.

  packetmode:
  : This parameter specifies the configured packetization mode as defined by the pacKetization mode (K) bit in the payload header of {{sec_payload_header_usage}}. This value SHALL be equal to the K-bit value configured in the RTP stream (i.e., 0 for codestream or 1 for slice).

Optional parameters:
: transmode: 
  : This parameter specifies the configured transmission mode as defined by the Transmission mode (`T`) bit in the payload header of {{sec_payload_header_usage}}. If specified, this value SHALL be equal to the `T` bit value configured in the RTP stream (i.e., 0 for out-of-order-allowed or 1 for sequential-only). If not specified, a value 1 (sequential-only) SHALL be assumed and the T bit SHALL be set to 1.

  profile:
  : The JPEG XS profile [ISO21122-2] in use. Any white space Unicode character in the profile name SHALL be omitted. Examples of valid profile names are 'Main444.12', 'High444.12', 'CHigh444.12', or 'TDC444.12'.

  level:
  : The JPEG XS level [ISO21122-2] in use. Any white space Unicode character in the level name SHALL be omitted. Examples of valid levels are '2k-1' or '4k-2'.

  sublevel:
  : The JPEG XS sublevel [ISO21122-2] in use. Any white space Unicode character in the sublevel name SHALL be omitted. Examples of valid sublevels are 'Sublev3bpp' or 'Sublev6bpp'.

  fbblevel:
  : The JPEG XS frame buffer level [ISO21122-2] in use. Any white space Unicode character in the fbblevel name SHALL be omitted. Examples of valid frame buffer levels are 'Fbblev3bpp' or 'Fbblev12bpp'.

  depth:
  : Determines the number of bits per sample. This is an integer with typical values including 8, 10, 12, and 16.

  width:
  : Determines the number of pixels per line. This is an integer between 1 and 32767, inclusive.

  height:
  : Determines the number of lines per video frame. This is an integer between 1 and 32767, inclusive.

  exactframerate:
  : Signals the video frame rate in frames per second. Integer frame rates SHALL be signaled as a single decimal number (e.g., "25") whilst non-integer frame rates SHALL be signaled as a ratio of two integer decimal numbers separated by a "forward-slash" character (e.g., "30000/1001"), utilizing the numerically smallest numerator value possible.

  interlace:
  : If this parameter name is present, it indicates that the video is interlaced, or that the video is Progressive segmented Frame (PsF). If this parameter name is not present, the progressive video format SHALL be assumed.

  segmented:
  : If this parameter name is present, and the interlace parameter name is also present, then the video is a Progressive segmented Frame (PsF). Signaling of this parameter without the interlace parameter is forbidden.

  sampling:
  : Signals the color difference signal sub-sampling structure.

    Signals utilizing the non-constant luminance `Y'C'B C'R` signal format of [BT601-7], [BT709-6], [BT2020-2], or [BT2100-2] SHALL use the appropriate one of the following values for the Media Type Parameter "sampling":

    `YCbCr-4:4:4`
    : (4:4:4 sampling)

    `YCbCr-4:2:2`
    : (4:2:2 sampling)

    `YCbCr-4:2:0`
    : (4:2:0 sampling)

    Signals utilizing the Constant Luminance `Y'C C'BC C'RC` signal format of [BT2020-2] SHALL use the appropriate one of the following values for the Media Type Parameter "sampling":

    `CLYCbCr-4:4:4`
    : (4:4:4 sampling)

    `CLYCbCr-4:2:2`
    : (4:2:2 sampling)

    `CLYCbCr-4:2:0`
    : (4:2:0 sampling)

    Signals utilizing the constant intensity `I CT CP` signal format of [BT2100-2] SHALL use the appropriate one of the following values for the Media Type Parameter "sampling":

    `ICtCp-4:4:4`
    : (4:4:4 sampling)

    `ICtCp-4:2:2`    
    : (4:2:2 sampling)

    `ICtCp-4:2:0`
    : (4:2:0 sampling)

    Signals utilizing the 4:4:4 `R' G' B'` or RGB signal format (such as that of [BT601-7], [BT709-6], [BT2020-2], [BT2100-2], [SMPTE2065-1], or [SMPTE2065-3]) SHALL use the following value for the Media Type Parameter "sampling":

    `RGB`
    : (RGB or R' G' B' samples)

    Signals utilizing the 4:4:4 `X' Y' Z'` signal format (such as defined in [SMPTE428-1]) SHALL use the following value for the Media Type Parameter "sampling":

    `XYZ`
    : (`X' Y' Z'` samples)

    Key signals as defined in [SMPTE157] SHALL use the value key for the Media Type Parameter "sampling". The key signal is represented as a single component:

    `KEY`
    : (Samples of the key signal)

    Signals utilizing a color sub-sampling other than what is defined here SHALL use the following value for the Media Type Parameter "sampling":

    `UNSPECIFIED`
    : (Sampling signaled by the payload)

  colorimetry:
  : Specifies the system colorimetry used by the video samples. Valid values and their specification are the following:

    `BT601-5`:
    : [BT601-5].

    `BT709-2`:
    : [BT709-2].

    `SMPTE240M`:
    : [SMPTE240M].

    `BT601`:
    : [BT601-7].

    `BT709`:
    : [BT709-6].

    `BT2020`:
    : [BT2020-2].

    `BT2100`:
    : [BT2100-2], Table 2 titled "System colorimetry".

    `ST2065-1`:
    : Academy Color Encoding Specification (ACES) [SMPTE2065-1].

    `ST2065-3`:
    : Academy Density Exchange Encoding (ADX) [SMPTE2065-3].

    `XYZ`:
    : [ISO11664-1], section titled "1931 Observer".

    `UNSPECIFIED`:
    : Colorimetry SHALL either be signaled in the payload by the Color Specification box of [ISO21122-3], or be manually coordinated between sender and receiver.

    Signals utilizing the [BT2100-2] colorimetry SHOULD also signal the representational range using the optional parameter RANGE defined below.  Signals utilizing the `UNSPECIFIED` colorimetry might require manual coordination between the sender and the receiver.

  TCS:
  : Transfer Characteristic System. This parameter specifies the transfer characteristic system of the video samples.  Valid values and their specification are the following:

    `SDR`:
    : Standard Dynamic Range video streams that utilize the Optical Electrical Transfer Function (OETF) of [BT709-6] or [BT2020-2]. Such streams SHALL be assumed to target the Electro-Optical Transfer Function (EOTF) specified in [BT1886-0].

    `PQ`:
    : High dynamic range video streams that utilize the Perceptual Quantization system of [BT2100-2].

    `HLG`:
    : High dynamic range video streams that utilize the Hybrid Log-Gamma system of [BT2100-2].

    `UNSPECIFIED`:
    : Video streams whose transfer characteristics SHALL either be signaled by the payload as specified in [ISO21122-3], or be manually coordinated between sender and receiver.

  RANGE:
  : This parameter SHOULD be used to signal the encoding range of the sample values within the stream. When paired with [BT2100-2] colorimetry, this parameter has two allowed values, `NARROW` and `FULL`, corresponding to the ranges specified in TABLE 9 of [BT2100-2]. In any other context, this parameter has three allowed values: `NARROW`, `FULLPROTECT`, and `FULL`, which correspond to the ranges specified in [SMPTE2077]. In the absence of this parameter, and for all but the `UNSPECIFIED` colorimetry, `NARROW` SHALL be the assumed value. When paired with the UNSPECIFIED colorimetry, `FULL` SHALL be the default assumed value.

Encoding considerations:
: This media type is framed in RTP and contains binary data; see Section 4.8 of [RFC6838].

Security considerations:
: See the Security Considerations section of {{&SELF}}.

Interoperability considerations:
: None

Published specification:
: See the References section of {{&SELF}}

Applications that use this media type:
: Any application that transmits video over RTP (like SMPTE ST 2110).

Fragment identifier considerations:
: N/A

Additional information:
: None

Person & email address to contact for further information:
: T. Bruylants <rtp@intopix.com> and T. Richter <jpeg-xs-techsupport@iis.fraunhofer.de>.

Intended usage:
: COMMON

Restrictions on usage:
: This media type depends on RTP framing; hence, it is only defined for transfer via RTP [RFC3550].

Author:
: See the Authors' Addresses section of {{&SELF}}.

Change controller:
: IETF Audio/Video Transport Working Group delegated from the IESG.

# SDP Parameters

A mapping of the parameters into the Session Description Protocol (SDP) [RFC8866] is provided for applications that use SDP.

## Mapping of Payload Type Parameters to SDP

The media type video/jxsv string is mapped to fields in the Session Description Protocol (SDP) [RFC8866] as follows:

  The media type ("video") goes in SDP "m=" as the media name.

  The media subtype ("jxsv") goes in SDP "a=rtpmap" as the encoding name, followed by a slash ("/") and the required parameter "rate" corresponding to the RTP timestamp clock rate (which for the payload format defined in this document SHALL be 90000).

  The required parameter "packetmode" and any of the additional optional parameters, as described in {{sec-media-type-reg}}, go in the SDP media format description, being the "a=fmtp" attribute (Format Parameters), by copying them directly from the media type string as a semicolon-separated list of parameter=value pairs.

All parameters of the media format SHALL correspond to the parameters of the payload. In case of discrepancies between payload parameter values and SDP fields, the values from the payload data SHALL prevail.

The receiver SHALL ignore any parameter that is not defined in {{sec-media-type-reg}}.

An example SDP mapping for JPEG XS video is as follows:

~~~~
m=video 30000 RTP/AVP 112
a=rtpmap:112 jxsv/90000
a=fmtp:112 packetmode=0;sampling=YCbCr-4:2:2;
            width=1920;height=1080;depth=10;
            colorimetry=BT709;TCS=SDR;RANGE=FULL;TP=2110TPNL
~~~~

In this example, a JPEG XS RTP stream is to be sent to UDP destination port 30000, with an RTP dynamic payload type of 112 and a media clock rate of 90000 Hz. Note that the "a=fmtp:" line has been wrapped to fit this page and will be a single long line in the SDP file. This example includes the TP parameter (as specified in {{sec-traffic-shaping}}).

##  Usage with SDP Offer/Answer Model

When JPEG XS is offered over RTP using SDP in an offer/answer model [RFC3264] for negotiation for unicast usage, the following limitations and rules apply:

  The "a=fmtp" attribute SHALL be present specifying the required parameter "packetmode" and MAY specify any of the optional parameters, as described in {{sec-media-type-reg}}.

  All parameters in the "a=fmtp" attribute indicate sending capabilities (i.e., properties of the payload).

  An answerer of the SDP is required to support all parameters and values of the parameters provided by the offerer; otherwise, the answerer SHALL reject the session. It falls on the offerer to use values that are expected to be supported by the answerer. If the answerer accepts the session, it SHALL reply with the exact same
  parameter values in the "a=fmtp" attribute as they were initially offered.

  The same RTP payload type number used in the offer SHOULD be used in the answer, as specified in [RFC3264].

# IANA Considerations

IANA has registered the media type registration "video/jxsv" as specified in {{sec-media-type-reg}}. The media type has also been added to the IANA registry for "RTP Payload Format Media Types" (see https://www.iana.org/assignments/rtp-parameters).

# Security Considerations

RTP packets using the payload format defined in this memo are subject to the security considerations discussed in [RFC3550] and in any applicable RTP profile such as RTP/AVP [RFC3551], RTP/AVPF [RFC4585], RTP/SAVP [RFC3711], or RTP/SAVPF [RFC5124]. This implies that confidentiality of the media streams is achieved by encryption.

However, as "Securing the RTP Framework: Why RTP Does Not Mandate a Single Media Security Solution" [RFC7202] discusses, it is not an RTP payload format's responsibility to discuss or mandate what solutions are used to meet the basic security goals like confidentiality, integrity, and source authenticity for RTP in general. This responsibility lies on anyone using RTP in an application. They can find guidance on available security mechanisms and important considerations in "Options for Securing RTP Sessions" [RFC7201]. Applications SHOULD use one or more appropriate strong security
mechanisms.

Implementations of this RTP payload format need to take appropriate security considerations into account. It is important for the decoder to be robust against malicious or malformed payloads and ensure that they do not cause the decoder to overrun its allocated memory or otherwise misbehave. An overrun in allocated memory could lead to arbitrary code execution by an attacker. The same applies to the encoder, even though problems in encoders are typically rarer.

This payload format and the JPEG XS encoding do not exhibit any substantial non-uniformity, either in output or in complexity to perform the decoding operation; thus, they are unlikely to pose a denial-of-service threat due to the receipt of pathological datagrams.

This payload format and the JPEG XS encoding do not contain code that is executable.

It is important to note that high-definition (HD) or ultra-high-definition (UHD) video that is encoded with JPEG XS can have significant bandwidth requirements (typically more than 1 Gbps for UHD video, especially if using high framerate). This is sufficient to cause potential for denial of service if transmitted onto most currently available Internet paths.

Accordingly, if best-effort service is being used, users of this payload format SHALL monitor packet loss to ensure that the packet loss rate is within acceptable parameters. Packet loss is considered acceptable if a TCP flow across the same network path, and experiencing the same network conditions, would achieve an average throughput, measured on a reasonable timescale, that is not less than the RTP flow is achieving. This condition can be satisfied by implementing congestion control mechanisms to adapt the transmission rate (or the number of layers subscribed for a layered multicast session) or by arranging for a receiver to leave the session if the loss rate is unacceptably high.

This payload format may also be used in networks that provide quality-of-service guarantees. If enhanced service is being used, receivers SHOULD monitor packet loss to ensure that the service that was requested is actually being delivered. If it is not, then they SHOULD assume that they are receiving best-effort service and behave accordingly.

# Acknowledgments

The authors would like to thank the following people for their valuable contributions that made this memo possible: Antonin Descampe, Siegfried Foessel, Arnaud Germain, Jean-Baptiste Lorent, S&eacute;bastien Lugan, Ga&euml;l Rouvroy, and Alexandre Will&egrave;me.

--- back

{: #annex-a}
# Changes from RFC9134

Most of this RFC is identical to [RFC9134]. There are no changes in the packet formatting or headers defined by this RTP payload specification, only new provisions are added to support the features that were added by the third edition of [ISO21122-1], [ISO21122-2], and [ISO21122-3], in particular the new Temporal Differential Coding (TDC) profile. The revised payload format is designed to ensure that existing compliant implementations of [RFC9134] remain valid under the updated specification. Additionally, this document consolidates the errata of [RFC9134] and includes improvements and clarifications to enhance its clarity and effectiveness.

A summary of the changes:

- For TDC profiles, [ISO21122-1] relies on a specific slice header marker called SLI, in addition to the original SLH marker. The SLI marker indicates that the slice encodes TDC-enabled content. This distinction is not directly relevant to this specification, and for the purposes of this RFC, both the SLH and SLI markers serve the same function: to define the boundaries of packetization units when using the Slice Packetization mode, as described in {{sec_rtp_packetization}}. Yet, this document was updated to reflect the possibility for using either SLH and SLI markers.
- In addition to the level and sublevel, the TDC coding mode introduces an fbblevel in [ISO21122-2] that needs to be supported as an optional payload parameter. A new parameter for signaling the fbblevel is defined in {{sec-payload-params}}.
- This document now provides more clarifications and improved descriptions for correctly handling interlaced video.
- {{sec-codestream}} provides a more detailed definition of a Slice to clarify that this RTP payload format supports the optional slice-based extension marker functionality defined in [ISO21122-1].
- The erratum of [RFC9134] concerning the RTP timestamp for interlaced video signals has been incorporated into this specification.
